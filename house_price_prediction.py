# -*- coding: utf-8 -*-
"""house-price-prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K7NPowAs67SZdzKNhQw4wVa-gf8GVEFi

**Importing dependencies**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.model_selection import train_test_split

"""**Loading data**"""

train=pd.read_csv('/content/train.csv', index_col='Id')
test=pd.read_csv('/content/test.csv', index_col='Id')

train['MSZoning'].unique()

sns.countplot(x='MSZoning',data=train)

sns.countplot(x='SaleCondition',data=train)

train_col_null=train.columns[train.isnull().any()==True].tolist()
train[train_col_null].isnull().sum()

sns.countplot(x='MSZoning',data=test)

sns.countplot(x='SaleCondition',data=test)

test_col_null=test.columns[test.isnull().any()==True].tolist()
test[test_col_null].isnull().sum()

"""**Feature Engineering**"""

X=train.dropna(axis=0,subset=['SalePrice'])

y=X.SalePrice
X.drop(['SalePrice'],axis=1,inplace=True)

X_train_full,X_valid_full,y_train,y_valid=train_test_split(X,y,train_size=0.8,test_size=0.2,random_state=0)

low_cardinality_col=[n for n in X_train_full.columns if X_train_full[n].nunique()<10 and X_train_full[n].dtype=='object']

numeric_col=[i for i in X_train_full.columns if X_train_full[i].dtype in ['int64','float64']]

my_col=low_cardinality_col+numeric_col
X_train=X_train_full[my_col].copy()
X_valid=X_valid_full[my_col].copy()
X_test=test[my_col].copy()

X_train=pd.get_dummies(X_train)
X_valid=pd.get_dummies(X_valid)
X_test=pd.get_dummies(X_test)
X_train,X_valid=X_train.align(X_valid,join='left',axis=1)
X_train,X_test=X_train.align(X_test,join='left',axis=1)

"""**Model Fitting and prediction**"""

from xgboost import XGBRegressor
xgb=XGBRegressor(n_estimato=1000,learning_rate=0.05)

#fit the model
xgb.fit(X_train,y_train)

#get predictions
y_predi=xgb.predict(X_valid)

#to calculate mean absolute error MAE

from sklearn.metrics import mean_absolute_error

mae=mean_absolute_error(y_predi,y_valid)
print('MAE : ',mae)

#prediction
prediction=xgb.predict(X_test)

"""**Submission file**"""

output=pd.DataFrame({'id':X_test.index,'SalePrice':prediction})
output.to_csv('result.csv',index=False)